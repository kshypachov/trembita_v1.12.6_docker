# Default values for trembita-1.12.6-ss.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: kshypachov/trembita_ss_v1.12.6
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.0.10"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
services:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  external:
    enabled: true
    type: LoadBalancer
    ports:
      - name: port5500
        port: 5500
        targetPort: 5500
      - name: port5577
        port: 5577
        targetPort: 5577
      - name: port5599
        port: 5599
        targetPort: 5599

  internal:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        port: 4000
        targetPort: 4000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/"
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/preserve-host: "true"
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: trembita.local
      paths:
        - path: /
          pathType: Prefix
          port: 4000
  tls:
    - hosts:
        - trembita.local
      secretName: trembita-tls
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
readinessProbe: {}
#livenessProbe:
#  httpGet:
#    path: /login
#    port: 4000
#    scheme: HTTP
#readinessProbe:
#  httpGet:
#    path: /login
#    port: 4000
#    scheme: HTTP

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: etc-uxp
    persistentVolumeClaim:
      claimName: trembita-1-12-6-trembita-1-12-6-etc-uxp
  - name: lib-uxp
    persistentVolumeClaim:
      claimName: trembita-1-12-6-trembita-1-12-6-lib-uxp
  - name: postgres-data
    persistentVolumeClaim:
      claimName: trembita-1-12-6-trembita-1-12-6-postgres-data
  - name: log
    persistentVolumeClaim:
      claimName: trembita-1-12-6-trembita-1-12-6-log
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: etc-uxp
    mountPath: /etc/uxp
  - name: lib-uxp
    mountPath: /var/lib/uxp
  - name: postgres-data
    mountPath: /var/lib/postgresql/10/main/
  - name: log
    mountPath: /var/log/
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

persistentVolumes:
  etc-uxp:
    enabled: true
    size: 100Mi
    mountPath: /etc/uxp
    storageClassName: ""
    accessModes:
      - ReadWriteOnce

  lib-uxp:
    enabled: true
    size: 200Mi
    mountPath: /var/lib/uxp
    storageClassName: ""
    accessModes:
      - ReadWriteOnce

  postgres-data:
    enabled: true
    size: 1Gi
    mountPath: /var/lib/postgresql/10/main/
    storageClassName: ""
    accessModes:
      - ReadWriteOnce

  log:
    enabled: true
    size: 200Mi
    mountPath: /var/log
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
